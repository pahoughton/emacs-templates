;;
;;  File:	default-C.tmpl
;;  Project:	EmacsTemplates 
;;  Desc:
;;
;;	Emacs Lisp source
;;  
;;  Notes:
;;    
;;  Author(s):   Paul Houghton <<paul.houghton@wcom.com>>
;;  Created:     02/21/2002 08:24
;;  
;;  Revision History: (See end of file for Revision Log)
;;  
;;	$Author$
;;	$Date$
;;	$Name$
;;	$Revision$
;;	$State$
;;
;;  $Id$
;;


;;
;; Available Template Variables:
;;
;;  file-name
;;  file-base-name
;;  file-ext
;;  email
;;  timestamp
;;
;; Available Template Functions
;;
;;  (template-ver-string  tag)
;;	where tag can be one of:
;;	    'project | 'author | 'date | 'version | 'state | 'id | 'log
;;
;;  (template-get-project-name)
;;
;;  (template-insert-fragment tmpl-file)
;;	Return a string containing the processed contents of
;;	a template file. See Makefile.tmpl for a usage example.
;;	

(or template-doc-desc
    (setq template-doc-desc ""))

(let* ( (class-name
	 (replace-in-string file-name "\\.C$" "" ))
	(include-name
	 (concat class-name ".hh" ) )
	(prj-name (template-get-project-name)) )

  (insert
"/**
  File:		" file-name "
  Project:	" prj-name
		  " "
		  (template-ver-string 'project) "
  Desc:

    " template-doc-desc "
  
  Notes:
    
  Author(s):   " (user-full-name) " " email "
  Created:     " timestamp "
  
  Revision History: (See ChangeLog for details)
  
    " (template-ver-string 'author) "
    " (template-ver-string 'date) "
    " (template-ver-string 'version) "
    " (template-ver-string 'state) "

    " (template-ver-string 'id) "

**/
#include \"" include-name "\"

#if defined( " (upcase prj-name) "_DEBUG )
#include \"" class-name ".ii\"
#endif


"class-name"::"class-name"( void )
{
}

"class-name"::~"class-name"( void )
{
}

bool
"class-name"::good( void ) const
{
  return( true );
}

const char *
"class-name"::error( void ) const
{
  static Str errStr;

  errStr = "class-name"::getClassName();

  if( good() )
    {
      errStr << \": ok\";
    }
  else
    {
      size_t eSize = errStr.size();

      if( eSize == errStr.size() )
        errStr << \": unknown error\";
    }

  return( errStr.c_str() );
}

const char *
"class-name"::getClassName( void ) const
{
  return( \""class-name"\" );
}

const char *
"class-name"::getVersion( bool withPrjVer ) const
{
  return( \"" (template-ver-string 'id) "\" );
}


ostream &
"class-name"::dumpInfo(
  ostream &	dest,
  const char *	prefix,
  bool		showVer
  ) const
{
  if( showVer )
    dest << "class-name"::getClassName() << \":\\n\"
	 << "class-name"::getVersion() << '\\n';

  if( ! "class-name"::good() )
    dest << prefix << \"Error: \" << "class-name"::error() << '\\n';
  else
    dest << prefix << \"Good\" << '\\n';


  return( dest );
}

")

  (beginning-of-buffer) )

;;; Local Variables:
;;; mode:Emacs-Lisp
;;; end:

