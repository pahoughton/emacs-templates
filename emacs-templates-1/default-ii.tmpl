;;
;;  File:	default-ii.tmpl
;;  Project:	EmacsTemplates 
;;  Desc:
;;
;;	Emacs Lisp source
;;  
;;  Notes:
;;    
;;  Author(s):   Paul Houghton <<paul.houghton@wcom.com>>
;;  Created:     02/21/2002 08:41
;;  
;;  Revision History: (See end of file for Revision Log)
;;  
;;	$Author$
;;	$Date$
;;	$Name$
;;	$Revision$
;;	$State$
;;
;;  $Id$
;;


;;
;; Available Template Variables:
;;
;;  file-name
;;  file-base-name
;;  file-ext
;;  email
;;  timestamp
;;
;; Available Template Functions
;;
;;  (template-ver-string  tag)
;;	where tag can be one of:
;;	    'project | 'author | 'date | 'version | 'state | 'id | 'log
;;
;;  (template-get-project-name)
;;
;;  (template-insert-fragment tmpl-file)
;;	Return a string containing the processed contents of
;;	a template file. See Makefile.tmpl for a usage example.
;;	

(or template-doc-desc
    (setq template-doc-desc ""))

(let* ( (define-name
	  (concat "_" (replace-in-string file-name "\\.ii$" "_ii_" )))
	(class-name
	 (replace-in-string file-name "\\.ii$" "" ))
	(prj-name (template-get-project-name)) )

  (insert
"#ifndef " define-name "
#define " define-name "
/**
  File:		" file-name "
  Project:	" prj-name
		  " "
		  (template-ver-string 'project) "
  Desc:

    " template-doc-desc "
  
  Notes:
    
  Author(s):   " (user-full-name) " " email "
  Created:     " timestamp "
  
  Revision History: (See ChangeLog for details)
  
    " (template-ver-string 'author) "
    " (template-ver-string 'date) "
    " (template-ver-string 'version) "
    " (template-ver-string 'state) "

  " (template-ver-string 'id) "

**/
#if defined( " (upcase prj-name) "_DEBUG )
#define inline
#endif

inline
DumpInfo< " class-name " >
" class-name "::dump( const char * prefix, bool showVer ) const
{
  return( DumpInfo< " class-name " >( *this, prefix, showVer ) );
}

inline
ostream &
operator << ( ostream & dest, const "class-name" & obj )
{
  return( obj.toStream( dest ) );
}

inline
istream &
operator >> ( istream & src, "class-name" & obj )
{
  return( obj.fromStream( src ) );
}


#if defined( inline )
#undef inline
#endif


/**
  Set XEmacs mode

  Local " "Variables:
  mode: c++
  End:
**/

#endif // ! def " define-name " 
")
  (beginning-of-buffer)
  )
;;; Local Variables:
;;; mode:Emacs-Lisp
;;; end:

